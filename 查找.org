* 线性结构
** 顺序查找
   - 线性表.
   - 无序表 asl_成功 = $\frac{n+1}{2}$.
   - 无序表 asl_失败 = n+1.
   - 按查找概率排序可减少 asl.
   - 有序表 asl_成功 = $\frac{n+1}{2}$.
   - 有序表 asl_失败 = $\frac{n}{2} + \frac{n}{n+1}$.
   - 复杂度: O(n).
** 二分查找
   - 有序顺序表.
   - asl = log(n+1) - 1.
   - 复杂度: O(log(n)).
   - [[./二叉树.org::#二叉树]]
** 分块查找
   - 块内无序, 顺序查找.
   - 块间有序, 用有序顺序表存储索引, 二分查找.
   - b 块 s 记录每块.
   - 块间顺序查找时, asl = $\frac{s+b}{2} + 1$.
   - 当 s=b 时 asl 取最小值 s+1.
   - 块间二分查找时, asl = $log(b+1) + \frac{s+1}{2}$.
** b 树
   - m 阶 b 树或为空树.
   - 每个结点子结点不大于 m, 即关键字数不大于 m-1.
   - 根结点或无子结点, 或子结点数不小于 2.
   - 非根结点或无子结点, 或子结点数不小于 m/2 向上取值. (即非根结点或无子结点, 或子结点数为 [m/2 向上, m], 即关键字数为 [m/2 向上 - 1, m - 1])
   - 每一层到下一层之间用分块查找.
   - 磁盘存取次数正比于 b 树高度 h (只有最后一层之前的索引, 不包括最后一层数据).
** b+ 树
   - 类似 b 树.
   - 每个结点的关键字对应子结点最小值, 即一个关键字对应一个子结点.
   - 最后一层数据有序链接.
* 散列结构
** 散列函数
   - 直接定址法: ax+b, 适用于关键字基本连续, 否则空间利用率低.
   - 除留余数法: x/p, p 不大于接近表长的整数.
   - 同余法: x mod n, n 为不大于表长的素数.
** 冲突处理
   - 开放定址法
     - 线性探测法: 0, +1, +2, +3...
     - 平方探测法: 0, 1, -1, 4, -4, 9, -9...
       - 表大小取 4k+3 的质数.
       - 要求填装因子小于 0.5.
     - 再散列法: h=h_1+ih_2.
   - 链接法: 所有同义词存储在一个链表中.
* 字符串匹配
  [[./字符串匹配.org]]
