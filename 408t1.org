* 选择
  1. a
  2. a
  3. c
  4. a
     - c?
  5. d
  6. b
  7. b
  8. c
  9. c
  10. d
  11. b
  12. bda
      - cba
      - 冯诺依曼机基本工作方式是 _控制流驱动方式_
      - 冯诺依曼机基本工作方式的基本特点是 _按地址访问并顺序执行指令_
      - 冯诺依曼机根本特征是 _采用存储程序原理_
  13. c
  14. d
  15. c
      - dram 刷新不经过 cpu, 一次刷新占用一个存储周期
  16. a
  17. c
  18. a
  19. dc
  20. b
  21. b
  22. b
  23. b
  24. d
      - c
      - 进程不一定是调度的基本单位, 但是独立单位
  25. a
  26. c
  27. c
  28. c
  29. c
  30. a
  31. d
  32. b
  33. a
  34. a
  35. b
      - 退后 n 帧发送窗口最大为 2^n-1
  36. b
  37. d
  38. b
  39. d
      - b
      - tcp 拥塞窗口在达到阈值前指数增长, 之后线性增长
      - 超时后阈值为当前拥塞窗口一半, 重置拥塞窗口
      - 阈值 8: 1 2 4 8 9 10 11 12
      - 超时后阈值 6: 1 2 4 6 7 8
  40. a
* 大题
** 41
   - 平均带权路径长度
*** 41.1
    |              1 |  2 |     3 | 4 |  5 |  6 |  7 | 8 |
    |              5 | 25 |     3 | 6 | 10 | 11 | 36 | 4 |
    |----------------+----+-------+---+----+----+----+---|
    |              1 |  2 |    38 | 4 |  5 |  6 |  7 |   |
    |              5 | 25 |     7 | 6 | 10 | 11 | 36 |   |
    |----------------+----+-------+---+----+----+----+---|
    |             14 |  2 |    38 |   |  5 |  6 |  7 |   |
    |             11 | 25 |     7 |   | 10 | 11 | 36 |   |
    |----------------+----+-------+---+----+----+----+---|
    |             14 |  2 | (38)5 |   |    |  6 |  7 |   |
    |             11 | 25 |    17 |   |    | 11 | 36 |   |
    |----------------+----+-------+---+----+----+----+---|
    |          (14)6 |  2 | (38)5 |   |    |    |  7 |   |
    |             22 | 25 |    17 |   |    |    | 36 |   |
    |----------------+----+-------+---+----+----+----+---|
    | [(14)6][(38)5] |  2 |       |   |    |    |  7 |   |
    |             39 | 25 |       |   |    |    | 36 |   |
    |----------------+----+-------+---+----+----+----+---|
    | [(14)6][(38)5] | 27 |       |   |    |    |    |   |
    |             39 | 61 |       |   |    |    |    |   |
    {[(14)6][(38)5]}(27)
*** 41.2
    - 27: 1
      - 2: 10
      - 7: 11
    - [(14)6][(38)5]: 0
      - (14)6: 01
        - 6: 011
        - 14: 010
          - 1: 0101
          - 4: 0100
      - (38)5: 00
        - 5: 001
        - 38: 000
          - 3: 0001
          - 8: 0000
    - res
      |    1 |  2 |    3 |    4 |   5 |   6 |  7 |    8 |
      | 0101 | 10 | 0001 | 0100 | 001 | 011 | 11 | 0000 |
*** 41.3
    - 4*5 + 2*25 + 4*3 + 4*6 + 3*10 + 3*11 + 2*36 + 4*4 = 257
    - 257/8 = 32.125
** 42
*** 42.1
    1. 用两个工作指针 ia, ib 分别指向 a, b
    2. 若 (ia) = (ib) 则删掉 ia 指向元素
    3. 若 (ia) > (ib) 则 ib 自增
    4. 若 (ia) < (ib) 则 ia 自增
    5. 重复 1, 2, 3 直至 ia 或 ib 为空
*** 42.2
    #+begin_src cpp
      struct List {
        int data;
        List *next;
      };

      List *func(List *a, List *b) {
        List *guard = new List {0, a};
        List *prev = guard;
        while (a && b) {
          if (a->data == b->data) {
            prev = a->next;
            delete a;
          } else if (a->data > b->data) {
            b = b->next;
          } else {
            prev = a;
            a = a->next;
          }
        }
        List *retval = guard->next;
        delete guard;
        return retval;
      }
    #+end_src
*** 42.3
    O(m+n)
** 43
   - 改变后的中断处理屏蔽码: 中断程序设置的屏蔽码???
*** 43.1
    - 12345
    - 实际上?
*** 43.2
    - 45321
    - 实际上?
*** 43.3
    | 1 | - |    | - |    | - |    | - |    | -- |
    | 2 |   |    |   |    |   |    |   | -- |    |
    | 3 |   |    |   |    |   | -- |   |    |    |
    | 4 |   | -- |   |    |   |    |   |    |    |
    | 5 |   |    |   | -- |   |    |   |    |    |
** 44
*** 44.1
    - a: mdr
    - b: ir
    - c: mar
    - d: pc
*** 44.2
    1. pc -> mar
    2. m -> mdr
    3. mdr -> ir
*** 42.3
    1. m -> mdr
    2. mdr -> alu -> ac
    3. ac -> mdr
    4. mdr -> m
** 45
   #+begin_src cpp
     struct semphare {int i;};

     void p(semphare s) {};
     void v(semphare s) {};

     semphare gm {0};
     semphare gk {10};
     semphare t {3};
     semphare j {1};
     semphare g {1};

     void xhs() {
       p(gk);
       p(t);
       p(j);
       // do
       v(j);
       p(g);
       // do
       v(g);
       v(gm);
       v(t);
     }

     void lhs() {
       p(gm);
       p(t);
       p(g);
       // do
       v(g);
       v(gk);
       v(t);
     }
   #+end_src
** 46
   - 每个字段最多有 1K 字, 所以段表最多有 1K 项???
*** 46.1
    2^32 字 = 4G 字
*** 46.2
    - 每一字段最多有 1K 字?
    - 页内偏移量: log(16K) = 14
    - 段号+页号: 32-14 = 18
    - 物理页号: log(64M) - 14 = 26 - 14 = 12
** 47
   - 发送时延: (2000b)/(1Mb/s) = 0.002s
   - 总时延: 0.25*2+0.002 = 0.502s
   - 停止等待: 0.002/0.502 = 0.004
   - w = 7: 0.014/0.502 = 0.028
   - w = 127: 0.254/0.502 = 0.506
   - w = 255: 0.510/0.502 > 1: 1
