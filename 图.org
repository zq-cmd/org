* 定义
  - 图: G=(V, E), V 为点集, E 为 V 中的二元关系集合, 边集.
  - 图的阶: |V|, G 中顶点的个数.
  - 有向图: E 为有向边, 向量的集合.
  - 无向图: E 为无向边, 集合的集合.
  - 简单图: 不存在重复边和点到自身的边.
  - 多重图: 非简单图.
  - (简单)完全图: 任意两顶点之间都存在边的简单无向图.
  - 路径: 两点之间的顶点的序列.
  - 路径长度: 路径中顶点的个数.
  - 回路: 第一个顶点与最后一个顶点相同的路径.
  - 简单路径: 没有重复顶点的路径.
  - 简单回路: 除第一个和最后一个顶点外没有重复顶点的路径.
  - 距离: 两点间最短路径长度, 若无最短路径为 \infity.
  - 子图: G=(V, E), G'=(V', E'): V' \in V 且 E' \in E.
  - 连通: _无向图_ 中两点间存在路径.
  - 连通图: 任意两点连通.
  - 连通分量: _极大_ 连通子图, 不是任何连通子图的真子图.
  - 强连通: _有向图_ 中两点间互相存在路径.
  - 强连通图: 任意两点强连通.
  - 强连通分量: _极大_ 强连通子图.
  - 生成树: 包含全部顶点的极小 _连通_ 子图.
  - 森林: 全部连通分量的生成树.
  - 度: 无向图中以顶点为端点的边的数目.
  - 入度: 有向图中以顶点为头的边的数目.
  - 出度: 有向图中以顶点为尾的边的数目.
  - 尾 -> 头.
  - 带权图(网): 边上带有权值的图.
* 存储
** 邻接矩阵法
   - n 阶图, 用 nxn 的矩阵 A 存储.
   - 若边 a->b 的权为 x, 则 A[a][b] = x.
   - 若 ab 间不存在边, 则 A[a][b] = \infty.
   - 非带权图视为所有边权为 1.
   - 无向图每一条边视为两条有向边.
** 邻接表法
   - n 阶图, 用 n 的链表指针数组 A 存储.
   - 若边 a->b, 则 A[a] 指向的链表有元素 b.
   - 若 ab 间不存在边, 则 A[a] 指向的链表没有元素 b.
   - 无向图每一条边视为两条有向边.
** 十字链表
   - 有向图, 类似邻接表.
   - 数组元素中多出一个指针, 指向链表中第一个 a 或为空.
   - 链表元素中多处一个指针, 指向下一个链表 b 或为空.
   - 多出的指针用于快速找出指向 a 的边.
   - 数组中多出的指针指向第一个指向 a 的边.
   - 链表中多出的指针指向下一个指向 a 的边.
* 遍历
** 二叉树
   :PROPERTIES:
   :CUSTOM_ID: 二叉树
   :END:
   [[./二叉树.org::#遍历]]
   - 广度优先搜索: 层次遍历
   - 深度优先搜索: 先序遍历
** 广度优先搜索
   - n 阶图用 n 的数组记录访问过的点.
   - 用队列保存接下来要访问的点.
   - 当访问一个点时, 将数组中该点记录为已访问.
   - 遍历与该点相连的点, 若其未访问, 则将其加入队列.
   - 从初始结点开始访问, 直至队列为空.
   - 广度优先搜索可以解决单源最短路径问题.
** 深度优先搜索
   - n 阶图用 n 的数组记录访问过的点.
   - 用栈保存接下来要访问的点.
   - 当访问一个点时, 将数组中该点记录为已访问.
   - 遍历与该点相连的点, 若其未访问, 则将其加入栈.
   - 从初始结点开始访问, 直至栈为空.
** 复杂度
   - 空间复杂度 O(|V|).
   - 邻接矩阵时间复杂度为 O(|V|^2).
   - 邻接表时间复杂度为 O(|V|+|E|)
* 算法
  - [[./最小生成树.org]]
  - [[./最短路径.org]]
  - [[./关键路径.org]]
