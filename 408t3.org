* 选择
  1. b
  2. b
  3. a
  4. d
  5. b
  6. b
     - 二叉树要么为 _空树_, 要么叶子结点的个数是度为 2 的结点的个数 + 1
  7. d
  8. a
  9. d
  10. b
  11. c
  12. a
  13. c
  14. a
  15. d
  16. d
  17. b
  18. b
  19. d
  20. b
  21. c
  22. b
  23. c
  24. bc
      - 印刷错误?
  25. b
  26. b
  27. d
  28. c
  29. d
  30. c
      - b
      - 光盘可随机访问
  31. ca
  32. c
  33. b
      - 信噪比: 10 * lg(信号功率/噪音功率)
      - 最大数据传输速率: 频率 * log(1 + 信号功率/噪音功率)
      - 频率: 频率范围 a~b, 频率 b-a
  34. c
  35. c
      - b
      - 窗口大小 = 窗口总数?
  36. ac
  37. a
  38. d
  39. b
  40. b
* 大题
** 41
   - 不大于表长的最大素数
*** 41.1
    11/0.75 = 14.667 ~= 15, p = 13
    |  0 | 1 |  2 |  3 | 4 |  5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 |
    |----+---+----+----+---+----+---+---+---+---+----+----+----|
    | 26 |   | 41 | 68 |   | 44 | 6 |   |   |   | 36 |    | 38 |
    |    |   | 15 |    |   |    |   |   |   |   |    |    | 12 |
    |    |   |    |    |   |    |   |   |   |   |    |    | 51 |
    |    |   |    |    |   |    |   |   |   |   |    |    | 25 |
*** 41.2
    - asl1 = (7*1 + 2*2 + 1*3 + 1*4)/11 = 18/11 ~= 1.64
    - asl2 = (5*1 + 1*2 + 1*4)/13 = 11/13 ~= 0.85
** 42
*** 42.1
    1. 若 i = j, 则 i = j 为公共结点, 算法结束
    2. 若 i < j, 则 j = (j - 1) / 2
    3. 若 i > j, 则 i = (i - 1) / 2
    4. 重复 1, 2, 3
*** 42.2
    #+begin_src cpp
      int func(int i, int j) {
        while (1) {
          if (i == j)
            return i;
          else if (i < j)
            j = (j-1)/2;
          else
            i = (i-1)/2;
        }
      }
    #+end_src
*** 42.3
    O(log(h))
** 43
   - 000~110 表示 7 个具有 2 个 15 位地址和 1 个 3 位地址的指令
   - 111 0000 0000 00 ~ 111 1000 0000 11 表示 500 个具有 1 个 15 位地址和 1 个 3 位地址的指令
   - 111 1000 0001 00 ~ 111 1000 1101 01 表示 50 个无地址指令
** 44
*** 44.1
    - 数据线数: 32
    - 地址线数: log(4M) = 22
*** 44.2
    - 4M/512K = 8
    - 32/8 = 4
    - 需要 8*4 = 32 片
*** 44.3
    - A_0 ~ A_18 直接存储芯片地址线
    - A_19 ~ A_21 接到 3/8 译码器, 再接到对应芯片片选线
** 45
   #+begin_src cpp
     struct semphare {int a;};

     semphare bl {1};
     semphare sl {1};
     semphare nl {1};

     int sc = 0;
     int nc = 0;

     void p (semphare a) {};
     void v (semphare a) {};

     void s() {
       p(sl);
       ++sc;
       if (sc == 1)
         p(bl);
       v(sl);
       // do
       p(sl);
       --sc;
       if (sc == 0)
         v(bl);
       v(sl);
     };

     void n() {
       p(nl);
       ++nc;
       if (nc == 1)
         p(bl);
       v(nl);
       // do
       p(nl);
       --nc;
       if (nc == 0)
         v(bl);
       p(nl);
     }
   #+end_src
** 46
*** 46.1
    - 2K/4 = 2^9
    - (8 + 2^9 + 2^18) * 2KB = 525328KB
*** 46.2
    - 128M/2K = 64K = 2^16
    - 1 + 1 + 127 = 129
    - 129 * 2KB + 128MB + 10 * 4B = 128MB + 258KB + 40B
** 47
*** 47.1
    - 源地址: c0a80101: 192.168.1.1
    - 目的地址: d803e315: 216.3.226.21
*** 47.2
    - 总长度: 0030: 48B
    - 部首长度: 5 * 4B = 20B
*** 47.3
    - 4000: 010 0 0000
    - 没有分片
*** 47.4
    06 tcp
