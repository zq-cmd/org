* 选择

** 数据结构 1~11

   1. c
   2. d
   3. b
   4. b
   5. c
   6. d
   7. d
   8. c
      - d
      - hash 线性探测法: 1, 2, 3... (不是 1, -1, 2, -2... ?)
      - hash 二次探测法: 1, -1, 4, -4, 9, -9...
   9. d
      - c
      - 快速排序总是 n 趟, 一趟确定一个元素的顺序
      - 冒泡排序可检查是否交换过元素提前结束
   10. d
   11. c

** 计算机组成原理 12~22

   1. c
   2. c
   3. a
   4. c
   5. d
   6. c
      - a
      - 基址, 变址扩大寻址范围: + 寄存器, 扩大寄存器寻址范围
   7. d
   8. c
   9. b
      - d
      - pci 总线: 与 cpu 无关, 即插即用, 猝发传送方式
   10. d
   11. c

** 操作系统 23~32

   1. b
   2. c
      - b
      - __ 算法有利于 cpu 繁忙进程, 不利于 io 繁忙进程????
      - 短作业, 优先级, 时间片轮转注重响应比和优先级, fcfs????
   3. b
   4. c
      - d
      - 优先级与作业长短没有联系
   5. d
   6. c
   7. a
   8. c
   9. b
   10. a
       - 通道 io 中断由设备管理器负责

** 计算机网络 33~40

   1. b
   2. c
   3. a
      - csma/cd 最小帧长: 最小帧长/传送速率 = 往返传播时间(aka 争用期)
   4. a
   5. b
   6. b
   7. b
   8. d

* 大题

** 41

*** 41.1

    |  0 | 33 | 22 |    |
    |  1 |  1 | 12 | 34 |
    |  2 | 13 |    |    |
    |  3 |    |    |    |
    |  4 |    |    |    |
    |  5 | 38 | 27 |    |
    |  6 |    |    |    |
    |  7 |    |    |    |
    |  8 |    |    |    |
    |  9 |    |    |    |
    | 10 |    |    |    |

*** 41.2

    - 成功: (4*1 + 3*2 + 1*3) / 8 = 13/8
    - 失败: (7*1 + 1*2 + 2*3 + 1*4) / 11 = 19/11

*** 41.3
    
    1, 12, 34

    
** 42
   
   #+begin_src cpp
     #include <iostream>

     using namespace std;

     struct List {List *next;};

     int func(List *l) {
       if (!l)
         return 0;
       List *p1 = l, *p2 = l;
       while (1) {
         if (!(p2 = p2->next))
           return 0;
         if (!(p2 = p2->next))
           return 0;
         p1 = p1->next;
         if (p1 == p2)
           return 1;
       }
     }

     int main() {
       List a, b, c;
       a.next = &b;
       b.next = &c;
       c.next = &b;
       cout << func(&a);
       c.next = nullptr;
       cout << func(&a);
       return 0;
     };
   #+end_src

   #+RESULTS:
   : 10
   
** 43
