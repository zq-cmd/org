* dijkstra 算法
  - 用 n 的数组记录已选择的点.
  - 用 n 的数组记录初始点到各点的当前最小距离.
  - 选择未选择的点中找到当前距离初始点最近的点, 更新未选择点到初始点的距离.

  |   | 1 |  2 | 3 | 4 | 5 |
  |---+---+----+---+---+---|
  | 1 |   | 10 |   |   | 5 |
  | 2 |   |    | 1 |   | 2 |
  | 3 |   |    |   | 4 |   |
  | 4 | 7 |    | 6 |   |   |
  | 5 |   |  3 | 9 | 2 |   |

  |   |      1 |       2 |          3 |          4 | 距离 |
  |---+--------+---------+------------+------------+------|
  | 2 |   1->2 | 1->5->2 |    1->5->2 |            |      |
  |   |     10 |       8 |          8 |            |    8 |
  |---+--------+---------+------------+------------+------|
  | 3 | \infty | 1->5->3 | 1->5->4->3 | 1->5->2->3 |      |
  |   |        |      14 |         13 |          9 |    9 |
  |---+--------+---------+------------+------------+------|
  | 4 | \infty | 1->5->7 |            |            |      |
  |   |        |       7 |            |            |    7 |
  |---+--------+---------+------------+------------+------|
  | 5 |   1->5 |         |            |            |      |
  |   |      5 |         |            |            |    5 |
  |---+--------+---------+------------+------------+------|
  |   |      1 |      15 |        154 |       1542 |      |
* floyd 算法
  - 用 nxn 的矩阵记录当前最短路径, 其中 [i][j] 表示 i,j 间最短路径, 初始为邻接矩阵.
  - B 第一个点到最后一个点, 考虑键入该点后的新的最短路径, 更新矩阵.
  - 最后矩阵为各点间的最短路径.

  |    | 6 | 13 |
  | 10 |   |  4 |
  |  5 |   |    |

  |    |  6 | 13 |
  | 10 |    |  4 |
  |  5 | 11 |    |

  |    |  6 | 10 |
  | 10 |    |  4 |
  |  5 | 11 |    |

  |   |  6 | 10 |
  | 9 |    |  4 |
  | 5 | 11 |    |
* 复杂度
  - dijkstra 算法: 从初始点到所有点的最短路径, O(|V|^2).
  - floyd 算法: 各点间的最短路径, O(|V|^3).
