* 选择

  1. a
  2. b
  3. c
  4. b
  5. c
  6. b
  7. b
  8. d
  9. a
  10. d
  11. b
      - c
      - 多路归并排序, 虚拟归并段
      - 所有节点度为 m 或 0 的完全 m 叉树 (霍夫曼树)
      - 5 - 3 + 3*5 = 17, 5 - 4 + 4*5 = 21
  12. c
  13. d
  14. b
  15. d
  16. c
  17. c
  18. a
  19. d
      - c
      - 微指令不存在地址码和操作码, 只存在控制字段, 测试字段, 下地址字段
      - 微程序入口由机器指令操作码形成
  20. b
  21. d
  22. c
      - 关中断由隐指令完成
  23. b
  24. c
  25. d
  26. d
  27. b
  28. c
  29. b
  30. d
  31. a
  32. c
  33. b
  34. b
      - d
      - 虚电路不只是临时性的, 包括永久性虚电路和交换虚电路
  35. c
  36. c
  37. a
  38. d
  39. c
  40. b

* 大题

** 41

   破圈法证明:
   若得到的树 T_1 不是最小生成树 T_0, 则合并 T_1 和 T_0 得到图 T_2, T_2 有环, 否则 T_1 = T_2,
   取 T_2 中环, 去除其中最大的边, 得到的树 <= T_0, 又 T_0 为最小生成树, 故 T_0 = T_1

** 42

   #+begin_src cpp
     #include <list>
     #include <iostream>

     using namespace std;

     struct Tree {Tree *l, *r; char data;};

     int func1(Tree *t, Tree *d, list<Tree *> *hist) {
       if (!t) return 0;
       hist->push_back(t);
       if (t == d) return 1;
       if (func1(t->l, d, hist)) return 1;
       if (func1(t->r, d, hist)) return 1;
       hist->pop_back();
       return 0;
     }

     void func(Tree *t, Tree *d) {
       list<Tree *> hist;
       func1(t, d, &hist);
       for(auto t : hist) cout << t->data;
       cout << endl;
     }

     int main() {
       Tree t1{nullptr, nullptr, 'b'};
       Tree t2{nullptr, nullptr, 'c'};
       Tree t{&t1, &t2, 'a'};
       func(&t, &t2);
     }
   #+end_src

   #+RESULTS:
   : ac

** 43

*** 43.1

    x, y 按顺序访问, 具有空间局部性, 每个元素只访问一次, 没有时间局部性


*** 43.2

    - x 大小: 8 * 4B = 32B, 地址: 40H ~ 5fH
    - y 大小: 8 * 4B = 32B, 地址: 60H ~ 7fH
    - 命中率为 0

*** 43.3

    组号: 1b, 块内偏移量: 3b

    |                             / |  <> |  <> | <>     |
    |                           <r> | <r> | <r> | <l>    |
    |-------------------------------+-----+-----+--------|
    |                          内存 |  组 | tag | 元素   |
    |-------------------------------+-----+-----+--------|
    | 40H(100 0000) ~ 47H(100 0111) |   0 | 100 | x: 0~1 |
    | 48H(100 1000) ~ 4fH(100 1111) |   1 | 100 | x: 2~3 |
    | 50H(101 0000) ~ 57H(101 0111) |   0 | 101 | x: 4~5 |
    | 58H(101 1000) ~ 5fH(101 1111) |   1 | 101 | x: 6~7 |
    |-------------------------------+-----+-----+--------|
    | 60H(110 0000) ~ 67H(110 0111) |   0 | 110 | y: 0~1 |
    | 68H(110 1000) ~ 6fH(110 1111) |   1 | 110 | y: 2~3 |
    | 70H(111 0000) ~ 77H(111 0111) |   0 | 111 | y: 4~5 |
    | 78H(111 1000) ~ 7fH(111 1111) |   1 | 111 | y: 6~7 |
    |-------------------------------+-----+-----+--------|

    cache 未命中 8 次, 命中率 8/16 = 0.5

*** 43.4

    - x 大小 12 * 4B = 48B, 地址: 40H ~ 6fH
    - y 大小 8 * 4B = 32B, 地址: 70H ~ 8fH

    行号: 1b, 块内偏移量: 4b

    |                               / |  <> |   <> | <>      |
    |                             <r> | <r> |  <r> | <l>     |
    |---------------------------------+-----+------+---------|
    |                            内存 | tag | 行号 | 元素    |
    |---------------------------------+-----+------+---------|
    | 40H(0100 0000) ~ 4fH(0100 1111) | 010 |    0 | x: 0~4  |
    | 50H(0101 0000) ~ 5fH(0101 1111) | 010 |    1 | x: 4~7  |
    | 60H(0110 0000) ~ 6fH(0110 1111) | 011 |    0 | x: 8~11 |
    |---------------------------------+-----+------+---------|
    | 70H(0111 0000) ~ 7fH(0111 1111) | 011 |    1 | y: 0~3  |
    | 80H(1000 0000) ~ 8fH(1000 1111) | 100 |    0 | y: 4~7  |
    |---------------------------------+-----+------+---------|

    cache 未命中 4 次, 命中率 12/16 = 0.75

** 44

*** 44.1

    程序查询方式占用全部 cpu, 1

*** 44.2

    1MB/s / 32B = 0.25MHz

    0.25MHz * 100 = 25MHz

    25MHz / 50MHz = 0.5

*** 44.3

    4KB / 1MB/s = 0.004s

    0.004s * 50MHz = 0.2M

    1000 + 500 = 1500 = 1.5K

    1.5K / 0.2M = 0.0075

** 45

*** 45.1

    $5400r/min = 90r/s$

    $\frac{1}{90} s/r = \frac{100}{9} ms/r$

    $\frac{100}{9} \cdot (\frac{1}{2} + \frac{1}{63}) = 5.73ms$

    15.73ms

*** 45.2

    15.73 + 6.73 = 22.46ms

*** 45.3

    饥饿, 抖动

** 46

*** 46.1

    3, 最早加载

*** 46.2

    1, 最旧未访问

*** 46.3

    1, r, m 位均位 0

*** 56.4

    | /   | <>   |
    | <l> | <l>  |
    |-----+------|
    |     | 3021 |
    | 4   | 4302 |
    | 0   |      |
    | 0   |      |
    | 0   |      |
    | 2   |      |
    | 4   |      |
    | 2   |      |
    | 1   | 1240 |
    | 0   |      |
    | 3   | 3012 |
    | 2   |      |
    |-----+------|

    3 次

** 47

*** 47.1

    |----+------|
    |  n | cwnd |
    |----+------|
    |  1 |    1 |
    |  2 |    2 |
    |  3 |    4 |
    |  4 |    8 |
    |  5 |   16 |
    |  6 |   32 |
    |----+------|
    |  7 |   33 |
    |  8 |   34 |
    |  9 |   35 |
    | 10 |   36 |
    | 11 |   37 |
    | 12 |   38 |
    | 13 |   39 |
    | 14 |   40 |
    | 15 |   41 |
    | 16 |   42 |
    |----+------|
    | 17 |   21 |
    | 18 |   22 |
    | 19 |   23 |
    | 20 |   24 |
    | 21 |   25 |
    | 22 |   26 |
    |----+------|
    | 23 |    1 |
    | 24 |    2 |
    | 25 |    4 |
    | 26 |    8 |
    |----+------|

*** 42.2

    - 慢开始: 1~6, 23~26
    - 拥塞避免: 7~22

*** 42.3

    - 16: 三个重复确认
    - 22: 超时

*** 42.4

    - 1: 33
    - 18: 21
    - 24: 11

*** 42.5

    7

*** 42.6
    
    - cwnd: 4
    - ssthresh: 4
