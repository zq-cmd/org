* 树
  - 树: n 个点的有限集合, n=0 时为空树.
  - 度: 子结点的个数.
  - 树的度: 树中最大的结点的度.
  - 深度: 根结点深度为 1, 深度为 n 的结点的子结点深度为 n+1.
  - 树的高度: 树中最大的结点的深度.
  - 路径: 结点与其一子孙结点之间的所有结点组成的序列.
  - 长度: 路径的结点个数.
  - 森林: 任意个互不相交的树的集合.
* 二叉树
  :PROPERTIES:
  :CUSTOM_ID: 二叉树
  :END:
  - 二叉树: 度不大于 2 的树, 不是度为 2 的树.
  - 满二叉树: 1~h-1 层结点的度均为 2, 且 h 层结点的度均为 0.
  - 完全二叉树: 满二叉树 h 层右边依次缺少任意结点.
  - 二叉排序树: 任意结点左子树所有结点小于该结点, 右子树所有结点大于该结点.
  - 平衡二叉树: 二叉排序树, 树上任意结点的左子树和右子树高度之差不大于 1.
  - _非空_ 二叉树度为 0 的结点数 = 度为 2 的结点数 + 1.
  - 第二层结点数 = 第一层结点数+1.
  - 第三层结点数 = 2 倍第二层结点数 = 第二层结点数 + 第一层结点数 + 1.
  - 第 n 层结点数 = 2 倍第 n-1 层结点数 = 前 n-1 层结点数和 + 1.
  - 第 h 层共 2^h-1 个结点, 前 h 层共 2^h - 1 个结点.
  - n = 2^h - 1.
  - h = log(n+1).
* 遍历
  :PROPERTIES:
  :CUSTOM_ID: 遍历
  :END:
  [[./图.org::#二叉树]]
  - [先]左[中]右[后]
  - 先序遍历: 根左右
  - 中序遍历: 左根右
  - 后续遍历: 左右根
  - 层次遍历
* 转换
  - 树 -> 二叉树: 左孩子右兄弟, 转换后根结点没有左孩子.
  - 二叉树森林 -> 二叉树: 每一个二叉树根结点左孩子为下一个二叉树根结点.
* 平衡二叉树
  - LL: 左孩子左子树新增结点, 右旋转.
  - RR: 右孩子右子树新增结点, 左旋转.
  - LR: 左孩子右子树新增结点, 先左旋转, 后右旋转.
  - RL: 右孩子左子树新增结点, 先右旋转, 后左旋转.
  - 平衡因子:
    - -: 右子树高.
    - +: 左子树高.
