* 进程
** 进程
   - 进程由相关程序段, 数据段, 进程控制块PCB 构成.
   - 进程是系统进行资源分配和调度的独立单位.
   - 特征
     - 动态性
       - 进程有生命周期
     - 并发性
       - 多个进程实体并发运行
     - 独立性
       - 进程作为实体独立运行, 调度, 获得资源
     - 异步性
     - 结构性
       - 由程序段, 数据段, pcb 三部分组成
** 状态
   - 运行态
     - 单处理器每一时刻最多只有一个进程处于运行态
   - 就绪态
     - 获得除处理器外所需资源
   - 阻塞态
     - 等待某事件暂停运行
   - 创建态
   - 结束态
   - 创建 -> 就绪 <-> 运行 -> 结束
   - 运行 -> 阻塞 -> 就绪
** 控制
   - 创建
     - 分配进程标示PID, 申请 pcb
     - 分配资源 (内存)
     - 初始化 pcb
     - pcb 插入到就绪队列
   - 终止
     - 正常结束
     - 某种异常 (未处理且默认终止的异常)
     - 检索 pcb
     - 强制进入结束态, 回收资源
     - 强制终止子进程
     - 删除 pcb
   - 阻塞
     - 检索 pcb
     - 若为运行态, 保护现场, 转为阻塞态
     - pcb 插入到阻塞队列
   - 唤醒
     - 检索 pcb
     - 转为就绪态
     - pcb 插入就绪队列
   - 切换
     - 保护现场
     - 更新 pcb
     - pcb 插入到对应队列
     - 在就绪队列中选择进程
     - 更新 pcb
     - 恢复现场
** 组织
   - pcb
     - 进程描述信息
       - pid, uid
     - 进程控制管理信息
       - 状态, 优先级
     - 资源分配清单
       - 内存空间, 打开文件, 使用设备
     - 处理机相关信息
       - 保护现场时存放的信息L 寄存器等
   - 程序段
     - pc 指向的内存, 可被多个进程共享
   - 数据段
     - 初始化, 未初始化, 堆栈
** 通信
   - 共享存储
   - 消息传递
   - 管道通信
** 线程
   - 线程是独立调度的最小单位, 进程是资源分配的基本单位
   - 同进程中线程切换不会引起进程切换, 块进程线程切换会引起进程切换
   - 属性
     - 唯一线程标示TID, 线程控制块, 线程控制快保存现场信息
     - 同进程线程共享该进程所有资源
* 调度
** 方式
   - 非剥夺调度
     - 实现简单, 系统开销小, 适用于批处理操作系统
     - 不适用于分时操作系统和实时操作系统
   - 剥夺调度
     - 缩短响应时间
** 准则
   - cpu 利用率
   - 系统吞吐量
   - 周转时间
     - 从提交到完成所需时间
   - 等待时间
     - 处于就绪态的时间
   - 响应时间
     - 从提交到首次响应所需时间
** 算法
   - 先来先服务FCFS
     - 不可剥夺算法
     - 简单但效率低
   - 短作业优先SJF
     - 等待时间, 周转时间最优
     - 机饿现象, 响应时间长
   - 高响应比优先
     - 响应比: (等待时间 + 要求服务时间) / 要求服务时间
     - 综合 fcfs 和 sjf
     - 兼顾长作业, 避免机饿现象
   - 时间片轮转
     - 时间片大时为 fcfs, 时间片小时频繁切换进程, 开销增大
   - 多级反馈队列
     - 动态调整优先级和时间片大小, 兼顾短进程, 长进程和 io 型进程
     - 设置多个不同优先级就绪队列, 优先级高的队列时间片小
     - 新进程优先级最高
     - 通过时间片耗尽退出运行态的进程降低优先级
     - 最低优先级时间片轮转调度
* 同步
** 临界资源
   - 进入区
     - 检查并设置临界标志
   - 临界区
     - 访问临界资源
   - 退出区
     - 清楚临界标志
   - 剩余区
** 管程
   - 组成
     - 局部于管程的共享结构数据
     - 对该数据的初始化语句
     - 对该数据进行操作的一组过程
   - 特性
     - 局部于管程的数据只能被局部于管程的过程访问
     - 进程只有调用管程内的过程才能进入管程访问共享数据
     - 每次仅允许一个进程在管程内执行某个内部过程
** 同步准则
   - 空闲让进
   - 忙则等待
   - 有限等待
     - 保证请求进程有限时间内进入临界区
   - 让权等待
     - 不能进入临界区时立即释放处理器
** 互斥方法
   - 软件
     - 单标志法
       #+begin_src cpp
         int turn = 0;

         void f0() {
           while (turn != 0);
           // do
           turn = 1;
         }

         void f1() {
           while (turn != 1);
           // do
           turn = 0;
         }
       #+end_src
       - 必须交替进入临界区, 违背空闲让进
     - 双标志检查法
       #+begin_src cpp
         int flag[2];

         void f0() {
           while (flag[1]);
           flag[0] = 1;
           // do
           flag[0] = 0;
         }

         void f1() {
           while (flag[0]);
           flag[1] = 1;
           // do
           flag[1] = 0;
         }
       #+end_src
       - 可能同时进入临界区, 违背忙则等待
     - 双标志法后检查
       #+begin_src cpp
         int flag[2];

         void f0() {
           flag[0] = 1;
           while (flag[1]);
           // do
           flag[0] = 0;
         }

         void f1() {
           flag[1] = 1;
           while (flag[0]);
           // do
           flag[1] = 0;
         }
       #+end_src
       - 双方都先设置 flag 导致饥饿现象
     - Peterson 算法
       #+begin_src cpp
         int flag[2];
         int turn;

         void f0() {
           flag[0] = 1;
           turn = 1;
           while (flag[1] && turn == 1);
           // do
           flag[0] = 0;
         }

         void f1() {
           flag[1] = 1;
           turn = 0;
           while (flag[0] && turn == 0);
           // do
           flag[1] = 0;
         }
       #+end_src
       - 改进版双标志法后检查, 增加 turn 防止饥饿现象
   - 硬件
     - 关中断法
       - 在临界区关闭中断防止进程切换
       - 执行效率低
     - 硬件指令法
       - test&set 指令
         #+begin_src cpp
           // hard it
           int test_and_set(int *flag) {
             int retval = *flag;
             ,*flag = 1;
             return retval;
           }

           int flag;

           void f() {
             while (test_and_set(&flag));
             // do
             flag = 0;
           }
         #+end_src
       - swap 指令 (仅双进程)
         #+begin_src cpp
           // hard it
           void swap(int *a, int *b) {
             int tmp = *a;
             ,*a = *b;
             ,*b = tmp;
           }

           int key, lock;

           void f() {
             key = 1;
             while (key)
               swap(&key, &lock);
             // do
             lock = 0;
           }
         #+end_src
* 信号量
  - 由硬件实现的原语 PV 操作 (wait/signal)
  - 整型信号量
    #+begin_src cpp
      // hard it
      void wait(int *s) {
        while (*s <= 0);
        s--;
      }

      // hard it
      void signal(int *s) {
        s++;
      }
    #+end_src
  - 记录型信号量
    #+begin_src cpp
      #include <list>
      #include <random>

      using namespace std;

      struct process {
        // todo
        void wakeup() {}
      };

      struct semaphore {
        int val;
        list<process> ls;
      };

      void wait(semaphore& s, process& pro) {
        --s.val;
        if (s.val < 0)
          s.ls.push_back(pro);
        else
          pro.wakeup();
      };

      void signal(semaphore& s) {
        ++s.val;
        if (s.val <= 0) {
          auto it = next(s.ls.begin(),
                         default_random_engine()() % s.ls.size());
          it->wakeup();
          s.ls.erase(it);
        }
      }
    #+end_src
* 死锁
** 必要条件
   - 互斥条件
     - 产生死锁的相关资源有排他条件
   - 不剥夺条件
     - 资源只能主动释放
   - 请求和保持条件
     - 有进程请求资源
     - 该资源被其他进程占有使该进程阻塞
   - 循环等待条件
     - 存在循环等待链
** 处理策略
   - 预防
     - 破坏死锁产生必要条件
     - 互斥条件
       - 不可行
     - 不剥夺条件
       - 临界区细分为多个临界区
       - 适用于易于保存现场的资源, 如 cpu
     - 请求和保持条件
       - 静态分配资源, 只申请一次资源, 第一次申请时申请所有可能用到的资源
       - 资源严重浪费
     - 循环等待条件
       - 为所有资源编号, 申请 i 后只能申请 >i 的资源
       - 编号必须稳定, 不易于编程
   - 避免
     - 通过算法避免产生死锁
   - 检测
